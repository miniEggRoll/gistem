// Generated by CoffeeScript 1.8.0
(function() {
  var Q, chunk, debug, gistem, https;

  Q = require('q');

  https = require('https');

  debug = require('debug')('gistem:api');

  chunk = require('goodLuckChuck').chunk;

  gistem = (function() {
    function gistem(_arg) {
      this.user = _arg.user, this.password = _arg.password;
    }

    gistem.prototype.init = function() {
      var reqOpts;
      reqOpts = {
        hostname: 'api.github.com',
        port: '443',
        path: '/authorizations',
        auth: "" + this.user + ":" + this.password,
        method: 'GET',
        headers: {
          'User-Agent': this.user
        }
      };
      debug(this.user, this.password);
      return Q.Promise((function(_this) {
        return function(resolve, reject, notify) {
          var req;
          req = https.request(reqOpts, function(res) {
            if (res.statusCode === 200) {
              notify('get token ok');
              return res.pipe(new chunk()).on('data', function(data) {
                var result;
                result = JSON.parse(data.toString()).filter(function(a) {
                  return a.app.name === 'gistem (API)';
                })[0];
                if (result) {
                  _this.token = result.token;
                  return resolve(_this.token);
                } else {
                  return _this._createToken({
                    user: _this.user,
                    password: _this.password
                  }).then(resolve, reject, notify);
                }
              });
            } else {
              reject(res.statusCode);
              return res.abort();
            }
          });
          return req.end();
        };
      })(this));
    };

    gistem.prototype.get = function(id) {
      var reqOpts;
      reqOpts = {
        hostname: 'api.github.com',
        port: '443',
        path: "/gists/" + id,
        auth: this.token ? "" + this.token + ":x-oauth-basic" : void 0,
        method: 'GET',
        headers: {
          'User-Agent': this.user
        }
      };
      return Q.Promise((function(_this) {
        return function(resolve, reject, notify) {
          var req;
          req = https.request(reqOpts, function(res) {
            if (res.statusCode === 200) {
              notify("get gist " + id);
              return res.pipe(new chunk()).on('data', function(data) {
                return resolve(JSON.parse(data.toString()));
              });
            } else {
              reject(res.statusCode);
              return res.abort();
            }
          });
          return req.end();
        };
      })(this));
    };

    gistem.prototype.create = function(payload) {
      var reqOpts;
      reqOpts = {
        hostname: 'api.github.com',
        port: '443',
        path: "/gists",
        auth: this.token ? "" + this.token + ":x-oauth-basic" : void 0,
        method: 'POST',
        headers: {
          'User-Agent': this.user
        }
      };
      return Q.Promise((function(_this) {
        return function(resolve, reject, notify) {
          var req;
          req = https.request(reqOpts, function(res) {
            if (res.statusCode === 201) {
              notify("gist created");
              return res.pipe(new chunk()).on('data', function(data) {
                debug(JSON.parse(data.toString()));
                return resolve(JSON.parse(data.toString()));
              });
            } else {
              reject(res.statusCode);
              return req.abort();
            }
          });
          return req.end(JSON.stringify(payload));
        };
      })(this));
    };

    gistem.prototype.edit = function(id, payload) {
      var body, reqOpts;
      body = JSON.stringify(payload);
      reqOpts = {
        hostname: 'api.github.com',
        port: '443',
        path: "/gists/" + id,
        auth: "" + this.token + ":x-oauth-basic",
        method: 'PATCH',
        headers: {
          'User-Agent': this.user,
          'Content-Length': body.length
        }
      };
      debug(reqOpts);
      return Q.Promise((function(_this) {
        return function(resolve, reject, notify) {
          var req;
          notify(id, payload);
          req = https.request(reqOpts, function(res) {
            if (res.statusCode === 200) {
              notify("gist edited");
              return res.pipe(new chunk()).on('data', function(data) {
                debug(JSON.parse(data.toString()));
                return resolve(JSON.parse(data.toString()));
              });
            } else {
              reject(res.statusCode);
              return req.abort();
            }
          });
          return req.end(body);
        };
      })(this));
    };

    gistem.prototype.remove = function(id) {
      var reqOpts;
      reqOpts = {
        hostname: 'api.github.com',
        port: '443',
        path: "/gists/" + id,
        auth: "" + this.token + ":x-oauth-basic",
        method: 'DELETE',
        headers: {
          'User-Agent': this.user
        }
      };
      return Q.Promise((function(_this) {
        return function(resolve, reject, notify) {
          var req;
          notify(id);
          req = https.request(reqOpts, function(res) {
            var code;
            code = res.statusCode;
            req.abort();
            if (code === 204) {
              notify('gist removed');
              return resolve(code);
            } else {
              return reject(code);
            }
          });
          return req.end();
        };
      })(this));
    };

    gistem.prototype._createToken = function() {
      var reqOpts;
      reqOpts = {
        hostname: 'api.github.com',
        port: '443',
        path: '/authorizations',
        auth: "" + this.user + ":" + this.password,
        method: 'POST',
        headers: {
          'User-Agent': this.user
        }
      };
      return Q.Promise((function(_this) {
        return function(resolve, reject, notify) {
          var req;
          req = https.request(reqOpts, function(res) {
            if (res.statusCode === 201) {
              notify('token created');
              return res.pipe(new chunk()).on('data', function(data) {
                var token;
                token = JSON.parse(data.toString()).token;
                return resolve(token);
              });
            } else {
              reject(res.statusCode);
              return req.abort();
            }
          });
          return req.end(JSON.stringify({
            note: 'gistem',
            scopes: ['gist']
          }));
        };
      })(this));
    };

    gistem.prototype.list = function() {
      var reqOpts;
      reqOpts = {
        hostname: 'api.github.com',
        port: '443',
        path: "/gists",
        auth: this.token ? "" + this.token + ":x-oauth-basic" : void 0,
        method: 'GET',
        headers: {
          'User-Agent': this.user
        }
      };
      return Q.Promise((function(_this) {
        return function(resolve, reject, notify) {
          var req;
          req = https.request(reqOpts, function(res) {
            if (res.statusCode === 200) {
              notify('list gist ok');
              return res.pipe(new chunk()).on('data', function(data) {
                return resolve(JSON.parse(data.toString()));
              });
            } else {
              reject(res.statusCode);
              return res.abort();
            }
          });
          return req.end();
        };
      })(this));
    };

    return gistem;

  })();

  module.exports = gistem;

}).call(this);
